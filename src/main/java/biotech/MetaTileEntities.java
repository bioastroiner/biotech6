package biotech;

import gregapi.block.MaterialMachines;
import gregapi.block.MaterialScoopable;
import gregapi.block.multitileentity.MultiTileEntityBlock;
import gregapi.block.multitileentity.MultiTileEntityRegistry;
import gregapi.data.*;
import gregapi.oredict.OreDictMaterial;
import gregapi.recipes.Recipe.RecipeMap;
import gregapi.tileentity.machines.MultiTileEntityBasicMachineElectric;
import gregapi.util.UT;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.tileentity.TileEntity;

import static biotech.BioTech6Mod.out;
import static gregapi.data.CS.*;

public class MetaTileEntities {

    public static final RecipeMap
            //OilCleaner                = new RecipeMapFuelCleaner          (null, "gt.recipe.oilcleaner"                , "Oil Cleaner"                     , null, 0, 1, RES_PATH_GUI+"machines/Mixer"                     ,/*IN-OUT-MIN-ITEM=*/ 6, 1, 0,/*IN-OUT-MIN-FLUID=*/ 6, 2, 0,/*MIN*/ 2,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
            Fluidsolidifier           = new RecipeMap                     (null, "gt.recipe.fluidsolidifier"              , "Fluid Solidifier"                , null, 0, 1, RES_PATH_GUI+"machines/Generifier"                ,/*IN-OUT-MIN-ITEM=*/ 1, 1, 0,/*IN-OUT-MIN-FLUID=*/ 1, 1, 0,/*MIN*/ 1,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , CrackingTower             = new RecipeMap(null, "gt.recipe.crackingtower"                , "Cracking Tower"                  , null, 0, 1, RES_PATH_GUI+"machines/SteamCracking"             ,/*IN-OUT-MIN-ITEM=*/ 1, 3, 0,/*IN-OUT-MIN-FLUID=*/ 2, 9, 1,/*MIN*/ 2,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , ParticleCollider          = new RecipeMap                     (null, "gt.recipe.particlecollider"             , "Particle Collider"               , null, 0, 1, RES_PATH_GUI+"machines/Fusion"                    ,/*IN-OUT-MIN-ITEM=*/ 2, 6, 1,/*IN-OUT-MIN-FLUID=*/ 2, 6, 0,/*MIN*/ 2,/*AMP=*/ 1, "Start: "             ,    1, " EU"   , T, T, T, T, F, F, F)
//            , Ionizer                   = new RecipeMap                     (null, "gt.recipe.ionizer"                      , "Ionizer"                         , null, 0, 1, RES_PATH_GUI+"machines/Ionizer"                   ,/*IN-OUT-MIN-ITEM=*/ 1, 1, 0,/*IN-OUT-MIN-FLUID=*/ 1, 1, 0,/*MIN*/ 1,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , RPP                       = new RecipeMap                     (null, "gt.recipe.radiationprocessing"          , "radiationprocessing"             , null, 0, 1, RES_PATH_GUI+"machines/Lightning"                 ,/*IN-OUT-MIN-ITEM=*/ 6, 6, 0,/*IN-OUT-MIN-FLUID=*/ 6, 6, 0,/*MIN*/ 2,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , MaskAligner               = new RecipeMap                     (null, "gt.recipe.maskaligner"                  , "Mask Aligner"                    , null, 0, 1, RES_PATH_GUI+"machines/MaskAligner"               ,/*IN-OUT-MIN-ITEM=*/ 9, 1, 2,/*IN-OUT-MIN-FLUID=*/ 1, 0, 0,/*MIN*/ 2,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
            , LaserCutter               = new RecipeMap                     (null, "gt.recipe.lasercutter"                  , "Laser Cutter"                    , null, 0, 1, RES_PATH_GUI+"machines/LaserCutter"               ,/*IN-OUT-MIN-ITEM=*/ 1, 3, 1,/*IN-OUT-MIN-FLUID=*/ 0, 0, 0,/*MIN*/ 0,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , Incubator                 = new RecipeMap                     (null, "gt.recipe.incubator"                    , "Incubator"                       , null, 0, 1, RES_PATH_GUI+"machines/Incubator"                 ,/*IN-OUT-MIN-ITEM=*/ 3, 3, 1,/*IN-OUT-MIN-FLUID=*/ 3, 3, 0,/*MIN*/ 1,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , Well                      = new RecipeMap                     (null, "gt.recipe.well"                         , "Well"                            , null, 0, 1, RES_PATH_GUI+"machines/Generifier"                ,/*IN-OUT-MIN-ITEM=*/ 1, 1, 1,/*IN-OUT-MIN-FLUID=*/ 1, 1, 0,/*MIN*/ 1,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, F, F)
//            , BioLab                    = new RecipeMap                     (null, "gt.recipe.biolab"                       , "Biochemical Research Lab"        , null, 0, 1, RES_PATH_GUI+"machines/BioLab"                    ,/*IN-OUT-MIN-ITEM=*/ 6, 6, 0,/*IN-OUT-MIN-FLUID=*/ 6, 6, 0,/*MIN*/ 1,/*AMP=*/ 1, "Disinfection: "      ,    1, " LU"   , T, T, T, T, F, F, F)
//            , AquaticFarm               = new RecipeMap                     (null, "gt.recipe.aquaticfarm"                  , "Aquatic Farm"                    , null, 0, 1, RES_PATH_GUI+"machines/Sluice"                    ,/*IN-OUT-MIN-ITEM=*/ 1, 9, 1,/*IN-OUT-MIN-FLUID=*/ 1, 1, 1,/*MIN*/ 2,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T, F, T, T)
            , Assembler                 = new RecipeMap                     (null, "gt.recipe.assembler.component"                    , "Components Assembler"               , null, 0, 1, RES_PATH_GUI+"machines/Assembler"                 ,/*IN-OUT-MIN-ITEM=*/ 9, 1, 1,/*IN-OUT-MIN-FLUID=*/ 1, 0, 0,/*MIN*/ 1,/*AMP=*/ 1, ""                    ,    1, ""      , T, T, T, T)
            ;

    public static void init() {
        new MultiTileEntityRegistry("bt.multitileentity");
        out("Registering MultiTileEntities");
        MultiTileEntityRegistry aRegistry = MultiTileEntityRegistry.getRegistry("bt.multitileentity");
        MultiTileEntityBlock
                aMetal = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron", Material.iron, Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F), aMetalChips = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron", Material.iron, Block.soundTypeMetal, TOOL_shovel, 0, 0, 15, F, F), aMetalWires = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine", MaterialMachines.instance, Block.soundTypeMetal, TOOL_cutter, 0, 0, 15, F, F), aMachine = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine", MaterialMachines.instance, Block.soundTypeMetal, TOOL_wrench, 0, 0, 15, F, F), aWooden = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "wood", Material.wood, Block.soundTypeWood, TOOL_axe, 0, 0, 15, F, F), aBush = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "leaves", Material.leaves, Block.soundTypeGrass, TOOL_axe, 0, 0, 15, F, F), aStone = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock", Material.rock, Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F), aWool = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "cloth", Material.cloth, Block.soundTypeCloth, TOOL_shears, 0, 0, 15, F, F), aTNT = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "tnt", Material.tnt, Block.soundTypeGrass, TOOL_pickaxe, 0, 0, 15, F, F), aUtilMetal = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight, Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F), aUtilStone = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight, Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F), aUtilWood = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight, Block.soundTypeWood, TOOL_axe, 0, 0, 15, F, F), aUtilWool = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight, Block.soundTypeCloth, TOOL_shears, 0, 0, 15, F, F), aHive = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock", MaterialScoopable.instance, Block.soundTypeWood, TOOL_scoop, 0, 0, 15, F, F);

        Class<? extends TileEntity> aClass;
        OreDictMaterial aMat;

        /* Assembly Machine */
        int id = 0;
        aClass = MultiTileEntityBasicMachineElectric.class;
        for (int i = 1; i < 6; i++) {
            aMat = MT.DATA.Electric_T[i];
            aRegistry.add("Component Assembler (" + CS.VN[i] + ")", "Basic Machines", id, 20001, aClass, aMat.mToolQuality,
                    16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_INPUT,
                            V[i], // Voltage here
                            NBT_TEXTURE, "assembler", // TODO: do textures for Assembler
                            NBT_ENERGY_ACCEPTED, TD.Energy.EU,
                            NBT_RECIPEMAP, Assembler,
                    /* Sides:*/        NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U|SBIT_D),
                    "CRC", "KMK", " w ",
                    'M', OP.casingMachine.dat(MT.DATA.Electric_T[i]),
                    'K', MT.DATA.CABLES_01[i],
                    'R', IL.ROBOT_ARMS[i],
                    'C', OD_CIRCUITS[i]);
            id++;
        }

        aClass = MultiTileEntityBasicMachineElectric.class;
        aMat = MT.DATA.Electric_T[1];
        aRegistry.add("Electric Autoclave (" + VN[1] + ")", "Basic Machines", 20601, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32, NBT_TEXTURE, "autoclave", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autoclave, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachineQuadruple.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'G', OD_CIRCUITS[2], 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Electric_T[2];
        aRegistry.add("Electric Autoclave (" + VN[2] + ")", "Basic Machines", 20602, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128, NBT_TEXTURE, "autoclave", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autoclave, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachineQuadruple.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'G', OD_CIRCUITS[3], 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Electric_T[3];
        aRegistry.add("Electric Autoclave (" + VN[3] + ")", "Basic Machines", 20603, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512, NBT_TEXTURE, "autoclave", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autoclave, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachineQuadruple.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'G', OD_CIRCUITS[4], 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Electric_T[4];
        aRegistry.add("Electric Autoclave (" + VN[4] + ")", "Basic Machines", 20604, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "autoclave", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autoclave, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachineQuadruple.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'G', OD_CIRCUITS[5], 'P', OP.pipeMedium.dat(aMat));
        aMat = MT.DATA.Electric_T[5];
        aRegistry.add("Electric Autoclave (" + VN[5] + ")", "Basic Machines", 20605, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "autoclave", NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Autoclave, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachineQuadruple.dat(aMat), 'C', OP.casingSmall.dat(aMat), 'G', OD_CIRCUITS[6], 'P', OP.pipeMedium.dat(aMat));

        aClass = MultiTileEntityBasicMachineElectric.class;
        aMat = MT.DATA.Electric_T[1];
        aRegistry.add("Fluid Solidifier (" + VN[1] + ")", "Basic Machines", 20611, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32, NBT_TEXTURE, "fluidsolidifier", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, Fluidsolidifier, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(aMat), 'G', OD_CIRCUITS[1], 'P', OP.pipeLarge.dat(aMat));
        aMat = MT.DATA.Electric_T[2];
        aRegistry.add("Fluid Solidifier (" + VN[2] + ")", "Basic Machines", 20612, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128, NBT_TEXTURE, "fluidsolidifier", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, Fluidsolidifier, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(aMat), 'G', OD_CIRCUITS[2], 'P', OP.pipeLarge.dat(aMat));
        aMat = MT.DATA.Electric_T[3];
        aRegistry.add("Fluid Solidifier (" + VN[3] + ")", "Basic Machines", 20613, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512, NBT_TEXTURE, "fluidsolidifier", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, Fluidsolidifier, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(aMat), 'G', OD_CIRCUITS[3], 'P', OP.pipeLarge.dat(aMat));
        aMat = MT.DATA.Electric_T[4];
        aRegistry.add("Fluid Solidifier (" + VN[4] + ")", "Basic Machines", 20614, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "fluidsolidifier", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, Fluidsolidifier, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(aMat), 'G', OD_CIRCUITS[4], 'P', OP.pipeLarge.dat(aMat));
        aMat = MT.DATA.Electric_T[5];
        aRegistry.add("Fluid Solidifier (" + VN[5] + ")", "Basic Machines", 20615, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "fluidsolidifier", NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, Fluidsolidifier, NBT_INV_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_INV_SIDE_AUTO_IN, SIDE_TOP, NBT_INV_SIDE_OUT, SBIT_R | SBIT_L, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U | SBIT_F | SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R | SBIT_L, NBT_TANK_SIDE_AUTO_OUT, SIDE_LEFT, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D), "CwC", "PMP", "GPG", 'M', OP.casingMachine.dat(aMat), 'C', OP.plateDouble.dat(aMat), 'G', OD_CIRCUITS[5], 'P', OP.pipeLarge.dat(aMat));

//        aClass = MultiTileEntityBasicMachine.class;
//        aMat = MT.DATA.Electric_T[1];
//        aRegistry.add("Circuit Assembler (T1)", "Basic Machines", 20621, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D | SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[1], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
//        aMat = MT.DATA.Electric_T[2];
//        aRegistry.add("Circuit Assembler (T2)", "Basic Machines", 20622, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D | SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[2], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
//        aMat = MT.DATA.Electric_T[3];
//        aRegistry.add("Circuit Assembler (T3)", "Basic Machines", 20623, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D | SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[3], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
//        aMat = MT.DATA.Electric_T[4];
//        aRegistry.add("Circuit Assembler (T4)", "Basic Machines", 20624, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D | SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
//        aMat = MT.DATA.Electric_T[5];
//        aRegistry.add("Circuit Assembler (T5)", "Basic Machines", 20625, 20001, aClass, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "laserwelder", NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, RM.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D | SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[5], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        int i = 0;
        aMat = MT.DATA.Electric_T[i];


    }
}
